export declare function generateId(prefix?: string): string;
export declare function formatTimestamp(timestamp: number): string;
export declare function parseTimestamp(timestamp: string): number;
export declare function sleep(ms: number): Promise<void>;
export declare function retry<T>(fn: () => Promise<T>, maxAttempts?: number, baseDelay?: number): Promise<T>;
export declare function isValidAddress(address: string): boolean;
export declare function isValidStarknetAddress(address: string): boolean;
export declare function formatAddress(address: string, length?: number): string;
export declare function formatAmount(amount: number | string, decimals?: number): string;
export declare function calculatePercentage(value: number, total: number): number;
export declare function clamp(value: number, min: number, max: number): number;
export declare function randomBetween(min: number, max: number): number;
export declare function isValidNumber(value: any): boolean;
export declare function formatDuration(ms: number): string;
export declare function formatDurationSeconds(seconds: number): string;
export declare function delay(ms: number): Promise<void>;
export declare function deepClone<T>(obj: T): T;
export declare function removeUndefined<T extends Record<string, any>>(obj: T): Partial<T>;
export declare function isValidJSON(str: string): boolean;
export declare function safeParseJSON<T>(str: string, fallback: T): T;
export declare function safeStringifyJSON(obj: any): string;
export declare function randomHex(length?: number): string;
export declare function hexToBuffer(hex: string): Buffer;
export declare function bufferToHex(buffer: Buffer): string;
export declare function sha256(str: string): Promise<string>;
export declare function generateUUID(): string;
export declare function isPromise(value: any): value is Promise<any>;
export declare function isEmpty(value: any): boolean;
export declare function debounce<T extends (...args: any[]) => any>(func: T, delay: number): (...args: Parameters<T>) => void;
export declare function throttle<T extends (...args: any[]) => any>(func: T, limit: number): (...args: Parameters<T>) => void;
//# sourceMappingURL=helpers.d.ts.map